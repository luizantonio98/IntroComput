import pickle

def criando_banco_dados():
    dados={}
    entradabanco= open('testando.pickle','wb')
    pickle.dump(dados, entradabanco)
    entradabanco.close()
    
def carregando_banco_dados():
    entrada= open('testando.pickle','rb')
    dados= pickle.load(entrada)


def tela_inicial_primeiro_acesso():
    print('Bem-vindo a Estoque Mix Petiscaria')
    print('Como este é o seu primeiro acesso ao programa, você deverá criar'+
          '\nsua chave de acesso, que possibiltará a sua entrada futuramente.'+
          '\nAtenção! A chave nunca poderá ser modificada. Portanto tome bastante'+
          '\ncuidado ao criá-la.')
    criar_chave()
    if chave!= confirmacao:
        erro_criar_chave()
    if chave==confirmacao:
        print('As chaves são iguais. Se futuramente você esquecer sua chave de acesso,'+
            '\n ela será enviada para seu email.')
        inserir_email() #chamada de função
        if email==confirm_email:
            print('Chave de acesso criada e dados salvos com sucesso!')
        elif email!=confirm_email:
            erro_inserir_email() #chamada de função

def inserir_email():
    email= input('Digite seu email.')
    confirm_email= input('Digite seu email novamente')
    
def erro_inserir_email():
    print('O email e confirmação não são iguais, por favor tente novamente')
    email= input('Digite seu email.')
    confirm_email= input('Digite seu email novamente')


def criar_chave():
    chave= input('Digite aqui a chave de acesso:')
    confirmacao= input('Digite a confirmacao da chave de acesso:')

def erro_criar_chave():
    print('As chaves não conferem. Por favor, tente novamente.')
    chave= input('Digite aqui a chave de acesso')
    confirmacao= input('Digite a confirmacao da chave de acesso:')
    
              
def tela_inicial():
    print('Bem-vindo ao Estoque Mix Petiscaria')
    print('''[1]. Fazer login
[2]. Recuperar Chave de acesso''')
    lista= ['1','2']
    opcao= input('Escolha uma opção: ')
    if opcao not in lista:
        escolha= erro_tela_inicial(lista)
        if escolha=='1':
             login(chave)
        elif escolha=='2':
            recuperar_chave(argumento)
    elif opcao== 1:
        login(chave)
    elif opcao==2:
        recuperar_chave(argumento)
    
def erro_tela_inicial(lista):
    opcao=input('Escolha uma opção válida: ')
    while opcao not in lista:
        opcao=input('Escolha uma opção válida: ')
    return opcao
        
def login(chave):#chave vai ser importada do banco de dados
    senha= input('Digite sua chave de acesso:')
    if senha==chave:
        menu_principal()
    elif senha!=chave:
        erro_login()

def erro_login():
    print('Você digitou incorretamente a chave de acesso, tente novamente.')
    senha= input('Chave de acesso:')
    if senha== chave':
        menu_principal()
    else:
        erro_login()

def recuperar_chave(argumento): #argumento vai ser o bloco de notas importado
    print('Olá, para recuperar sua chave você precisa digitar seu email.')
    email= input('Digite seu email:')
    if  email==argumento:
        pass #funcao email_enviado()

def menu_principal():
    lista= ['1','2','3','4','5']
    print('*'*10+'MENU PRINCIPAL'+'*'*10)
    print('''[1]. Atualizar Pós-compras
[2]. Atualizar Pós-vendas
[3]. Visualizar Lista de compras
[4]. Visualizar itens próximos do vencimento
[5]. Remover item cadastrado no estoque''')
    entrada= input('Selecione uma opção:')
    if entrada not in lista:
        opcao= erro_menu(entrada,lista)
    elif opcao=='1':
        atualizar_pos_compras()
    elif opcao=='2':
        pos_vendas()
    elif opcao=='3':
        lista_de_compras()
    elif opcao=='4':
        vencimento()
    elif opcao=='5':
        pass
        #funcao remover_item()

def erro_menu(entrada,lista):
    escolha= input('Erro. Selecione uma opção:')
    while escolha not in lista:
        escolha= input('Erro. Selecione uma opção:')
    return escolha
    

def atualizar_pos_compras():
    print('*'*10+'ATUALIZAR PÓS-COMPRAS'+'*'*10)
    print('''[1]. Adicionar um novo item
[2]. Adicionar uma nova quantidade de itens''')
    escolha= input('Selecione uma opção: ')
    if  escolha=='1':
        adicionar_item()
    elif escolha=='2':
        adicionar_quantidade()
    else:
        erro_pos_compras(escolha)
   
        

def adicionar_item( ):
    descricao= input('Digite o nome do item: ')
    print("Digite 'sim' ou 'nao' para: ")
    pergunta1= input('É frágil? ')
    pergunta2= input('É perecivel? ')
    validade= input('Validade? ')
    print('Natural(0), Gelado(1), Congelado(2)')
    alimatacao= int(input('Informe a aclimatação: '))
    #editar para nao permitir entrada inválida

def adicionar_quantidade():
    print('Digite o código do item e quantidade que você deseja adicionar')
    #mostra os itens atuais
    codigo= int(input('Código do item: '))
    quantidade= int(input('Quantidade: '))
    codigostr= str(codigo)
    quantidadestr= str(quantidade)
        decisao=input('Você tem certeza que deseja adicionar '+quantidadestr+
                      '\nunidades de '+codigostr+'?').upper()
    decisoes(decisao)

def erro_pos_compras(escolha):
    escolha= input('Opção não encontrada. Digite [1]. Adicionar um novo item ou'+
    '\n[2]. Adicionar uma nova quantidade de itens')
    if escolha=='1':
        adicionar_item()
    elif escolha=='2':
         adicionar_quantidade()
    else:
        while escolha!='1' and escolha!='2':
            erro_pos_compras(escolha)
        
def decisoes(decisao):
    lista=['S','N','SIM','NAO','NÃO']
    if decisao=='S' or decisao=='SIM':
        novo_item=input('Alterações salvas com sucesso! Deseja adicionar um novo item?').upper()
        item(novo_item)
        
    elif decisao=='N' or decisao=='NAO' or decisao=='NÃO':
         print('Operação cancelada!')
         adicionar_quantidade()
    else:
        decisao= input("Opção não encontrada. Digite 's' para sim ou 'n' para não: ").upper()
        while decisao not in lista:
            decisao= input("Opção não encontrada. Digite 's' para sim ou 'n' para não: ").upper()
        decisoes(decisao)

def item(novo_item):
    if novo_item=='S' or novo_item=='SIM':
        adicionar_quantidade()
    elif novo_item=='N' or novo_item=='NAO' or novo_item=='NÃO':
        pos_compras()

    else:
        while novo_item not in lista:
            novo_item= input("Opção não encontrada. Digite 's' para sim ou 'n' para não: ").upper()
        item(novo_item)

def pos_vendas():
'''Levando em consideração que o estoque é um dicionario de listas. Caso a entrada de quantidade dos itens dos lotes que 
possuem vencimento mais próxima seja excedida, remover quantidade do lote posterior
eestoque = {'111000': [['arroz','2018-04-25',7],['arroz','2018-05-15',8],['arroz','2018-04-23',9]],'111001':[['feijão', '2018-04-03', 10]]}
'''
    cod = input('digite o código do produto que deseja atualizar no estoque:')
    if cod in estoque:
        quant = int(input('Digite a quantidade a ser removida:'))
        if len(estoque[cod]) >1:
            menor_data = estoque[cod][0][1]
            for k in estoque[cod]:
                #menor data
                if k[1][0:4] <= menor_data[0:4]:
                    if k[1][5:7] < menor_data[5:7]:
                        menor_data = k[1]
                    elif k[1][5:7] == menor_data[5:7]:
                        if k[1][-2:] < menor_data[-2:]:
                            menor_data = k[1]
            for k in estoque[cod]:
                if k[1] == menor_data:
                    quant_atual = k[2] - quant
                    k[2] = quant_atual
        else:
            quant_atual = estoque[cod][0][2] - quant
            estoque[cod][0][2] = quant_atual

def vencimento():
'''Levando em consideração que o estoque é um dicionario de listas
estoque = {'111000': [['arroz','2018-04-25',7],['arroz','2018-05-15',8],['arroz','2018-04-23',9]],'111001':[['feijão', '2018-04-03', 10]]}
'''
    from datetime import date
    hoje = date.today()
    hoje.toordinal()
    futuro = str(date.fromordinal(hoje.toordinal()+15))
    print(10*'-','PRODUTOS QUE IRÃO VENCER NOS PRÓXIMOS 15 DIAS',10*'-')
    print('CÓDIGO','%6s'%'NOME','%12s'%'VALIDADE' ,'%7s'%'QUANT')
    for i in estoque:
        if len(estoque[i])>1:
            for k in estoque[i]:
                ano = k[1][0:4]
                mes = k[1][5:7]
                dia = k[1][-2:]
                #comparando
                if futuro[0:4] == ano:
                    if mes < futuro[5:7]:
                        print(i,'|',k[0],'|',k[1],'|', k[2])
                    elif mes == futuro[5:7]:
                        if dia < futuro[-2:]:
                            print(i,'|',k[0],'|',k[1],'|', k[2])
         else:
            data = estoque[i][0][1]
            ano = data[0:4]
            mes = data[5:7]
            dia = data[-2:]
            #comparando
            if futuro[0:4] == ano:
                if mes < futuro[5:7]:
                    print(i,'|',estoque[i][0][0],'|',estoque[i][0][1],'|', estoque[i][0][2])
                elif mes == futuro[5:7]:
                    if dia < futuro[-2:]:
                        print(i,'|',estoque[i][0][0],'|',estoque[i][0][1],'|', estoque[i][0][2])
 
 def lista_de_compras():
 #Calcular a diferença, para criar a lista de compras
    print(10*'-','ESTOQUE AUTAL',10*'-')
    print('CÓDIGO','%6s'%'NOME','%12s'%'VALIDADE' ,'%7s'%'QUANT')
    for i in sorted(estoque):
        if len(estoque[i]) >1:
            for k in estoque[i]:
                print(i,'|',k[0],'|',k[1],'|', k[2])
        else:
            print(i,'|',k[0],'|',k[1],'|', k[2])

    
    
    
#Atualizar funções feitas e criar remover_item()








